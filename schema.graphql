# Input type for inserts
input InputInsertWidget {
  name: String
  description: String
  color: String
  size: String
  quantity: Int
}

input InsertWidgetTypeInput {
  widget: InputInsertWidget
  clientMutationId: String
}

type InsertWidgetTypePayload {
  viewer: Viewer
  widgetEdge: WidgetEdge
  clientMutationId: String
}

type Mutation {
  insertWidget(input: InsertWidgetTypeInput!): InsertWidgetTypePayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: Viewer
}

type Viewer implements Node {
  # The ID of an object
  id: ID!

  # A list of widgets
  widgets(after: String, first: Int, before: String, last: Int): WidgetConnection
}

type Widget implements Node {
  # The ID of an object
  id: ID!

  # name of the widget
  name: String

  # description of the widget
  description: String

  # color of the widget
  color: String

  # size of the widget
  size: String

  # quantity of the widget
  quantity: Int
}

# A connection to a list of items.
type WidgetConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [WidgetEdge]
  totalCount: Int
}

# An edge in a connection.
type WidgetEdge {
  # The item at the end of the edge
  node: Widget

  # A cursor for use in pagination
  cursor: String!
}
